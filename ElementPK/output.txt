-- FreeFem++ v4.15 (mer. 01 oct. 2025 15:29:50 CEST - git v4.15-136-g831473f55)
   file : test.edp
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : load"Element_Pk"
START P6
720 Point -->0( 6 0 0 ),denom= 720 1 1 ff= 720
720 Point -->1( 0 6 0 ),denom= 1 720 1 ff= 720
720 Point -->2( 0 0 6 ),denom= 1 1 720 ff= 720
120 Point -->3( 0 5 1 ),denom= 1 120 1 ff= 120
48 Point -->4( 0 4 2 ),denom= 1 24 2 ff= 48
36 Point -->5( 0 3 3 ),denom= 1 6 6 ff= 36
48 Point -->6( 0 2 4 ),denom= 1 2 24 ff= 48
120 Point -->7( 0 1 5 ),denom= 1 1 120 ff= 120
120 Point -->8( 1 0 5 ),denom= 1 1 120 ff= 120
48 Point -->9( 2 0 4 ),denom= 2 1 24 ff= 48
36 Point -->10( 3 0 3 ),denom= 6 1 6 ff= 36
48 Point -->11( 4 0 2 ),denom= 24 1 2 ff= 48
120 Point -->12( 5 0 1 ),denom= 120 1 1 ff= 120
120 Point -->13( 5 1 0 ),denom= 120 1 1 ff= 120
48 Point -->14( 4 2 0 ),denom= 24 2 1 ff= 48
36 Point -->15( 3 3 0 ),denom= 6 6 1 ff= 36
48 Point -->16( 2 4 0 ),denom= 2 24 1 ff= 48
120 Point -->17( 1 5 0 ),denom= 1 120 1 ff= 120
24 Point -->18( 1 1 4 ),denom= 1 1 24 ff= 24
12 Point -->19( 1 2 3 ),denom= 1 2 6 ff= 12
12 Point -->20( 2 1 3 ),denom= 2 1 6 ff= 12
12 Point -->21( 1 3 2 ),denom= 1 6 2 ff= 12
8 Point -->22( 2 2 2 ),denom= 2 2 2 ff= 8
12 Point -->23( 3 1 2 ),denom= 6 1 2 ff= 12
24 Point -->24( 1 4 1 ),denom= 1 24 1 ff= 24
12 Point -->25( 2 3 1 ),denom= 2 6 1 ff= 12
12 Point -->26( 3 2 1 ),denom= 6 2 1 ff= 12
24 Point -->27( 4 1 1 ),denom= 24 1 1 ff= 24
(1,1,4)(1,2,3)(2,1,3)(1,3,2)(2,2,2)(3,1,2)(1,4,1)(2,3,1)(3,2,1)(4,1,1)
il
6 0 0 0 0 0 0 0 1 2 3 4 5 5 4 3 2 1 1 1 2 1 2 3 1 2 3 4 
jl
0 6 0 5 4 3 2 1 0 0 0 0 0 1 2 3 4 5 1 2 1 3 2 1 4 3 2 1 
kl
0 0 6 1 2 3 4 5 5 4 3 2 1 0 0 0 0 0 4 3 3 2 2 2 1 1 1 1 
nn
0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 1 1 1 1 1 2 1 1 1 1 2 2 1 1 1 2 2 2 1 1 2 2 2 2 1 2 2 2 2 2 0 2 2 2 2 2 0 0 2 2 2 2 0 0 0 2 2 2 0 0 0 0 2 2 0 0 0 0 0 2 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 2 2 2 2 0 1 1 2 2 2 0 0 1 2 2 2 0 1 1 1 2 2 0 0 1 1 2 2 0 0 0 1 2 2 0 1 1 1 1 2 0 0 1 1 1 2 0 0 0 1 1 2 0 0 0 0 1 2 
aa
0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 0 0 1 2 3 0 1 0 1 2 0 1 2 0 1 0 1 2 3 0 0 1 2 3 4 0 0 1 2 3 4 0 1 0 1 2 3 0 1 2 0 1 2 0 1 2 3 0 1 0 1 2 3 4 0 0 1 2 3 4 0 0 1 2 3 0 1 0 1 2 0 1 2 0 1 0 1 2 3 0 0 1 2 3 4 0 0 0 1 2 3 0 0 1 0 1 2 0 1 0 0 1 2 0 0 1 2 0 1 0 1 0 1 0 1 0 1 2 0 0 1 0 0 1 2 3 0 0 1 0 1 2 0 0 1 2 0 1 0 0 1 2 3 0 0 
ff
720 720 720 120 48 36 48 120 120 48 36 48 120 120 48 36 48 120 24 12 12 12 8 12 24 12 12 24 
Other
0 1 2 7 6 5 4 3 12 11 10 9 8 17 16 15 14 13 18 19 20 21 22 23 24 25 26 27 
Data
0 1 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 0 0 0 0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 5 6 7 8 9 0 1 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 0 0 28 

    2 : include "getARGV.idp" // for gestion of FreeFem++ argument and in version 3.10-1 FH
    2 :  // F. Hecht 
    3 :  // Usage:  getARGV(n,defaultvalue) // get the fist used default valeu
    4 :  //  or     getARGV(after,defaultvalue) // get the arg after after 
    5 :  // the type of delfaut value given the return type: int,double, string
    6 :  // Modif version 3.54-2  Jan 2018 (add ones include)
    7 :  IFMACRO(!getARGVidp)
    8 &  macro getARGVidp 1 //
    9 &  
   10 &  
   11 &  func int usedARGV(int n)
   12 & {
   13 &   int k=1,ii=1,kk=1,ret=-1;
   14 &   for(int i=1;i<ARGV.n;++i)
   15 &    {
   16 &    // cout <<i<< " "<< ARGV[i] << " " <<(ARGV[i]=="-v") << " " << kk << "==" 
   17 &    //      << n << " " << ARGV[i].rfind("dp") << " " <<ARGV[i].length-2  << endl;
   18 &         
   19 &        if(ARGV[i]=="-v") i++;
   20 &        else if(ARGV[i]=="-fglut") i++;
   21 &        else if(ARGV[i]=="-ffg") i++;
   22 &        else if(ARGV[i]=="-glut") i++;
   23 &        else if(ARGV[i]=="-f") i++;
   24 &        else if(ARGV[i]=="-nw") ii;
   25 &        else if(ARGV[i]=="-wait") ii;
   26 &        else if(ARGV[i]=="-ne") ii;
   27 &        else if(ARGV[i]=="-cd") ii;
   28 &        //else if(ARGV[i].rfind(".edp")==ARGV[i].length-4 ) ii;
   29 &        else if(i==1) ii;
   30 &        else if(kk++==n) {ret=i;}
   31 &       // else cout << " +++ \n";
   32 &      }
   33 &    //  cout << ret << endl;
   34 &     return ret;
   35 & }
   36 & 
   37 & func int usedARGV(string after)
   38 & {
   39 &   int ret=-1;
   40 &   for(int i=ARGV.n-1;i>=0;--i)        
   41 &        if(ARGV[i]==after) { ret=++i; break;}
   42 &   if(ARGV.n<ret) ret=-1;
   43 &   return ret;
   44 & }
   45 & 
   46 & func int getARGV(int n,int default)
   47 & {
   48 &    int d=default;
   49 &    int k=usedARGV(n);
   50 &    if(k>0) d=strtol(ARGV[k]);
   51 &     return d;
   52 & }
   53 & func real getARGV(int n,real default)
   54 & {
   55 &    real d=default;
   56 &    int k=usedARGV(n);
   57 &    if(k>0) d=strtod(ARGV[k]);
   58 &    return d;
   59 & }
   60 & func string getARGV(int n,string default)
   61 & {
   62 &    string d=default;
   63 &    int k=usedARGV(n);
   64 &    if(k>0) d=ARGV[k];
   65 &     return d;
   66 & }
   67 & 
   68 & func int getARGV(string after,int default)
   69 & {
   70 &    int d=default;
   71 &    int k=usedARGV(after);
   72 &    if(k>0) d=strtol(ARGV[k]);
   73 &     return d;
   74 & }
   75 & func real getARGV(string after,real default)
   76 & {
   77 &    real d=default;
   78 &    int k=usedARGV(after);
   79 &    if(k>0) d=strtod(ARGV[k]);
   80 &    return d;
   81 & }
   82 & func string getARGV(string after,string default)
   83 & {
   84 &    string d=default;
   85 &    int k=usedARGV(after);
   86 &    if(k>0) d=ARGV[k];
   87 &     return d;
   88 & }
   89 & 
   90 & /*
   91 & cout << getARGV(1,100) << endl;
   92 & cout << getARGV(2,200.) << endl;
   93 & cout << getARGV(3,"300.000") << endl;
   94 & cout << getARGV("-n"," xxx") << endl;
   95 & */
   96 & ENDIFMACRO
    8 @  macro getARGVidp 1 //
    9 @  
   10 @  
   11 @  func int usedARGV(int n)
   12 @ {
   13 @   int k=1,ii=1,kk=1,ret=-1;
   14 @   for(int i=1;i<ARGV.n;++i)
   15 @    {
   16 @    // cout <<i<< " "<< ARGV[i] << " " <<(ARGV[i]=="-v") << " " << kk << "==" 
   17 @    //      << n << " " << ARGV[i].rfind("dp") << " " <<ARGV[i].length-2  << endl;
   18 @         
   19 @        if(ARGV[i]=="-v") i++;
   20 @        else if(ARGV[i]=="-fglut") i++;
   21 @        else if(ARGV[i]=="-ffg") i++;
   22 @        else if(ARGV[i]=="-glut") i++;
   23 @        else if(ARGV[i]=="-f") i++;
   24 @        else if(ARGV[i]=="-nw") ii;
   25 @        else if(ARGV[i]=="-wait") ii;
   26 @        else if(ARGV[i]=="-ne") ii;
   27 @        else if(ARGV[i]=="-cd") ii;
   28 @        //else if(ARGV[i].rfind(".edp")==ARGV[i].length-4 ) ii;
   29 @        else if(i==1) ii;
   30 @        else if(kk++==n) {ret=i;}
   31 @       // else cout << " +++ \n";
   32 @      }
   33 @    //  cout << ret << endl;
   34 @     return ret;
   35 @ }
   36 @ 
   37 @ func int usedARGV(string after)
   38 @ {
   39 @   int ret=-1;
   40 @   for(int i=ARGV.n-1;i>=0;--i)        
   41 @        if(ARGV[i]==after) { ret=++i; break;}
   42 @   if(ARGV.n<ret) ret=-1;
   43 @   return ret;
   44 @ }
   45 @ 
   46 @ func int getARGV(int n,int default)
   47 @ {
   48 @    int d=default;
   49 @    int k=usedARGV(n);
   50 @    if(k>0) d=strtol(ARGV[k]);
   51 @     return d;
   52 @ }
   53 @ func real getARGV(int n,real default)
   54 @ {
   55 @    real d=default;
   56 @    int k=usedARGV(n);
   57 @    if(k>0) d=strtod(ARGV[k]);
   58 @    return d;
   59 @ }
   60 @ func string getARGV(int n,string default)
   61 @ {
   62 @    string d=default;
   63 @    int k=usedARGV(n);
   64 @    if(k>0) d=ARGV[k];
   65 @     return d;
   66 @ }
   67 @ 
   68 @ func int getARGV(string after,int default)
   69 @ {
   70 @    int d=default;
   71 @    int k=usedARGV(after);
   72 @    if(k>0) d=strtol(ARGV[k]);
   73 @     return d;
   74 @ }
   75 @ func real getARGV(string after,real default)
   76 @ {
   77 @    real d=default;
   78 @    int k=usedARGV(after);
   79 @    if(k>0) d=strtod(ARGV[k]);
   80 @    return d;
   81 @ }
   82 @ func string getARGV(string after,string default)
   83 @ {
   84 @    string d=default;
   85 @    int k=usedARGV(after);
   86 @    if(k>0) d=ARGV[k];
   87 @     return d;
   88 @ }
   89 @ 
   90 @ /**
   91 @ cout << getARGV(1,100) << endl;
   92 @ cout << getARGV(2,200.) << endl;
   93 @ cout << getARGV(3,"300.000") << endl;
   94 @ cout << getARGV("-n"," xxx") << endl;
   95 @ */
   96 @ 
    3 : load"Element_P3"
    4 : load"Element_P4" load : P4 
    5 : load"GMintegration" d= 3T Ordre= 0 d!k!/(d+k)!= 1 1 1 1 1  err= 1.99929e-12
 d= 3T Ordre= 1 d!k!/(d+k)!= 0.25 0.25 0.25 0.25 0.25  err= 1.99929e-12
 d= 3T Ordre= 2 d!k!/(d+k)!= 0.1 0.1 0.1 0.1 0.1  err= 1.99929e-12
Erreur dans la formule d'integration d=3 exact = 2 Nb Point = 15

    6 : load"GMintegration3D"
    7 : load"qf11to25"
    8 : load "MUMPS"init MUMPS_SEQ: MPI_Init

    9 : real k = getARGV("-waven",3*0.5);
   10 : real c = 1;
   11 : real s= 0; 
   12 : func f =exp(1i*k*(x*c+y*s));
   13 : 
   14 : func Gxm = -1i*k*c*exp(1i*k*(x*c+y*s));
   15 : func GxM = -Gxm;
   16 : 
   17 : func Gym = -1i*k*s*exp(1i*k*(x*c+y*s));
   18 : func GyM = -Gym;
   19 : 
   20 : real lambda = 2*pi/k;
   21 : 
   22 : /**mesh Th1 = square(1,1);    // global mesh
   23 : fespace UH(Th1,PK);
   24 : fespace UH1(Th1,P1);
   25 : 
   26 : UH  ftest=x^7+y^7;
   27 : Th1=trunc(Th1,1,split=6);
   28 : UH1  ftest1=ftest-(x^7+y^7);
   29 : plot(ftest);
   30 : plot(ftest1);
   31 : cout<<endl;
   32 : //cout<<ftest[]<<endl;
   33 : cout<<ftest1[]<<endl;
   34 : 
   35 : exit(0);*/
   36 : macro Grad(u) [dx(u),dy(u)]  )  // EOM
   37 : NewMacro Verfimacro(PK)
   38 #     int npplo =10;
   39 #     mesh Th = square(npplo,npplo);    // global mesh
   40 #     fespace Uh(Th,PK);
   41 #     Uh <complex> u,v;
   42 #     //macro Grad(u) [dx(u),dy(u)] // EOM
   43 #     solve  pph(u,v,solver=sparsesolver) =
   44 #     int2d(Th,qft=qf25pT)(-(k^2)*u*v+Grad(u)'*Grad(v))
   45 #         +int1d(Th, 1,2,3,4,qforder=10)( (1i*k*u)  * v )
   46 #             +int1d(Th, 1,qforder=10)( (-(1i*k*f) - Gym) * v )
   47 #             +int1d(Th, 2,qforder=10)( (-(1i*k*f) - GxM) * v )
   48 #             +int1d(Th, 3,qforder=10)( (-(1i*k*f) - GyM) * v )
   49 #             +int1d(Th, 4,qforder=10)( (-(1i*k*f) - Gxm) * v );
   50 #     real Err= abs(sqrt( int2d(Th,qft=qf25pT)(u-f)^2));
   51 #     Uh ur= real (u);
   52 #     Uh VisERr= abs(real(f)-ur);
   53 #     plot (ur,fill=1,value=1);
   54 #     plot (VisERr,fill=1,value=1);
   55 # 
   56 #     cout<<"Error= "<<Err/abs(sqrt( int2d(Th,qft=qf25pT)(f)^2))<<endl;
   57 #     cout<<"Npoint(npplo)="<<npplo<<"\t Error(relative)= "<<Err/abs(sqrt( int2d(Th)(f)^2))<<endl;
   58 # 
   59 # EndMacro )  
   61 : 
   62 : Verfimacro(PK)
   38 @       
   39 @            // global mesh
   40 @      
   41 @       
   42 @     //macro Grad(u) [dx(u),dy(u)] // EOM
   43 @        
   44 @     
   45 @               
   46 @                    
   47 @                    
   48 @                    
   49 @                    
   50 @        
   51 @        
   52 @       
   53 @      
   54 @      
   55 @ 
   56 @      
   57 @      
   58 @ 
   59 @ 
   38 @     int npplo =10;
   39 @     mesh Th = square(npplo,npplo);    // global mesh
   40 @     fespace Uh(Th,PK);
   41 @     Uh <complex> u,v;
   42 @     //macro Grad(u) [dx(u),dy(u)] // EOM
   43 @     solve  pph(u,v,solver=sparsesolver) =
   44 @     int2d(Th,qft=qf25pT)(-(k^2)*u*v+Grad(u)   [dx(u),dy(u)] '*Grad(v)   [dx(v),dy(v)] )
   45 @         +int1d(Th, 1,2,3,4,qforder=10)( (1i*k*u)  * v )
   46 @             +int1d(Th, 1,qforder=10)( (-(1i*k*f) - Gym) * v )
   47 @             +int1d(Th, 2,qforder=10)( (-(1i*k*f) - GxM) * v )
   48 @             +int1d(Th, 3,qforder=10)( (-(1i*k*f) - GyM) * v )
   49 @             +int1d(Th, 4,qforder=10)( (-(1i*k*f) - Gxm) * v );
   50 @     real Err= abs(sqrt( int2d(Th,qft=qf25pT)(u-f)^2));
   51 @     Uh ur= real (u);
   52 @     Uh VisERr= abs(real(f)-ur);
   53 @     plot (ur,fill=1,value=1);
   54 @     plot (VisERr,fill=1,value=1);
   55 @ 
   56 @     cout<<"Error= "<<Err/abs(sqrt( int2d(Th,qft=qf25pT)(f)^2))<<endl;
   57 @     cout<<"Npoint(npplo)="<<npplo<<"	 Error(relative)= "<<Err/abs(sqrt( int2d(Th)(f)^2))<<endl;
   58 @ 
   59 @ ; sizestack + 1024 =4656  ( 3632 )

  -- Square mesh : nb vertices  =121 ,  nb triangles = 200 ,  nb boundary edges 40 rmdup= 0
  -- Solve : 
          min (0,0)  max (1,0.997495)
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
OOO
1 1 1 1 -1 -1 -1 -1 1 1 1 1 
OOO
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 
Error= 1.35988e-12
Npoint(npplo)=10	 Error(relative)= 1.35988e-12
times: compile 0.123035s, execution 1.99921s,  mpirank:0
