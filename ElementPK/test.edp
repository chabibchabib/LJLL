load"Element_Pk"
include "getARGV.idp"
load"Element_P3"
load"Element_P4"
load"GMintegration"
load"GMintegration3D"
load"qf11to25"

real k = getARGV("-waven",3.);
func f = exp(-((x-.5)^2+(y-.5)^2)*k*10);

real lambda = 2*pi/k;

real epsilonprob = 0;
int Dirichlet = 1;
int Robin = 2;

int[int] chlab=[1, Robin, 2, Robin, 3, Robin, 4, Robin];

real npplo = 50.;

mesh Th = square(npplo*1./lambda,npplo*1./lambda);    // global mesh

Th=change(Th,refe=chlab);

//fespace Uh(Th,P3);
fespace Uh(Th,P4);

Uh <complex> u,v;
macro Grad(u) [dx(u),dy(u)] // EOM
int intorder = 10;
solve  pph(u,v) =
  int2d(Th,qft=qf25pT)(-(k^2-1i*epsilonprob)*u*v+Grad(u)'*Grad(v))
				+ int1d(Th,Robin,qforder=intorder)(1i*k*u*v)
				+ on(Dirichlet,u=0) - int2d(Th,qft=qf25pT)(f*v);
Uh ur= real (u);
plot (ur,fill=1,value=1);
int order=2;

real Val=real (int2d(Th,qft=qf25pT)((f-u)'*(f-u)));
cout<<endl<<"Error="<<sqrt(Val/real(int2d(Th,qft=qf25pT)(f^2)))<<endl;
