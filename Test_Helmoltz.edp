include "getARGV.idp"
load "GMintegration"
load"Element_P3"
load"Element_P4"

load"qf11to25"
real k = getARGV("-waven",3.);
func f = 100*exp(-((x-.5)^2+(y-.5)^2)*k*10);

real lambda = 2*pi/k;

real epsilonprob = 0;
int Dirichlet = 1;
int Robin = 2;

int[int] chlab=[1, Robin, 2, Robin, 3, Robin, 4, Robin];

real npplo = 15.;

mesh Th = square(npplo*1./lambda,npplo*1./lambda);    // global mesh

Th=change(Th,refe=chlab);

fespace Uh(Th,P4);
Uh <complex> u,v;
macro Grad(u) [dx(u),dy(u)] // EOM
/*func ff= u^3;
 cout<< int2d(Th,qft=gm2ds3Fct13)(ff)<<","<<int2d(Th,qforder=13)(ff)<<endl ; */
solve  pph(u,v) =
  int2d(Th)(-(k^2-1i*epsilonprob)*u*v+Grad(u)'*Grad(v))
				+ int1d(Th,Robin)(1i*k*u*v)
				+ on(Dirichlet,u=0) - int2d(Th)(f*v);
Uh <complex> uint,vint;

/*solve  pphint(uint,vint) =
  int2d(Th,qft=gm2ds3)(-(k^2-1i*epsilonprob)*uint*vint+Grad(uint)'*Grad(vint))
				+ int1d(Th,Robin)(1i*k*uint*vint)
				+ on(Dirichlet,uint=0) - int2d(Th,qft=gm2ds3)(f*vint);

real Val=real (int2d(Th)((uint-u)'*(uint-u)));
cout<<endl<<"Error="<<Val/real(int2d(Th)(u))<endl;*/
Uh ur= real (u);
//plot (ur,fill=1,value=1);
int order=2;

real Val2=real(int2d(Th,qforder=10)(abs(u^8)));
real Val3=real(int2d(Th,qft=GMQuadrature(18))(abs(u^8)));

cout<<"Integrale="<<Val3<<","<<Val2<<endl;
